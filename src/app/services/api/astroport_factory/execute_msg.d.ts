/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      update_config: {
        fee_address?: string | null;
        generator_address?: string | null;
        owner?: string | null;
        token_code_id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      update_pair_config: {
        config: PairConfig;
        [k: string]: unknown;
      };
    }
  | {
      create_pair: {
        /**
         * Asset infos
         */
        asset_infos: [AssetInfo, AssetInfo];
        /**
         * Optional binary serialised parameters for custom pool types
         */
        init_params?: Binary | null;
        /**
         * Type of pair contract
         */
        pair_type: PairType;
        [k: string]: unknown;
      };
    }
  | {
      deregister: {
        asset_infos: [AssetInfo, AssetInfo];
        [k: string]: unknown;
      };
    };
export type PairType =
  | {
      xyk: {
        [k: string]: unknown;
      };
    }
  | {
      stable: {
        [k: string]: unknown;
      };
    }
  | {
      custom: string;
    };
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
        [k: string]: unknown;
      };
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;

export interface PairConfig {
  code_id: number;
  is_disabled?: boolean | null;
  maker_fee_bps: number;
  pair_type: PairType;
  total_fee_bps: number;
  [k: string]: unknown;
}
